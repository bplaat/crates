/*
 * Copyright (c) 2024 Bastiaan van der Plaat
 *
 * SPDX-License-Identifier: MIT
 */

use indexmap::IndexMap;

use crate::openapi::{OpenApi, Schema};
use crate::utils::ToCapitalize;

pub(crate) fn generator(spec: OpenApi, output_path: &str) {
    // Generate code for all schemas
    let mut schemas = IndexMap::new();
    for (name, schema) in spec.components.expect("No components").schemas {
        schema_generate_code(&mut schemas, name, &schema, false);
    }

    // Write .rs file
    let mut code = "// This file is generated by openapi-generator, do not edit!\n\n".to_string();
    for schema in schemas.values() {
        code.push_str(schema);
    }
    std::fs::write(output_path, code)
        .unwrap_or_else(|_| panic!("Failed to write: {}", output_path));
}

fn schema_generate_code(
    schemas: &mut IndexMap<String, String>,
    name: String,
    schema: &Schema,
    is_required: bool,
) -> String {
    if let Some(r#enum) = &schema.r#enum {
        let name = name.to_capitalize();
        let mut code = String::new();
        code.push_str(&format!("export enum {} {{\n", name));
        for variant in r#enum {
            code.push_str(&format!(
                "    {} = '{}',\n",
                variant.to_capitalize(),
                variant
            ));
        }
        code.push_str("}\n\n");
        schemas.insert(name.clone(), code);
        return name;
    }

    if let Some(additional_properties) = &schema.additional_properties {
        let field_type = schema_generate_code(schemas, name.clone(), additional_properties, true);
        let code = format!("export type {} = Map<string, {}>;\n\n", name, field_type);
        schemas.insert(name.clone(), code);
        return name;
    }

    if schema.r#type == "object" {
        let mut code = String::new();
        code.push_str(&format!("export interface {} {{\n", name));
        if let Some(properties) = &schema.properties {
            for (prop_name, prop_schema) in properties {
                let prop_type = schema_generate_code(
                    schemas,
                    prop_name.to_string(),
                    prop_schema,
                    schema
                        .required
                        .as_ref()
                        .map(|required| required.contains(prop_name))
                        .unwrap_or_else(|| false),
                );
                code.push_str(&format!("    {}: {},\n", prop_name, prop_type));
            }
        }
        code.push_str("}\n\n");
        schemas.insert(name.clone(), code);
        return name;
    }

    let r#type = match schema.r#type.as_str() {
        "string" => {
            if schema.r#enum.is_some() {
                return schema_generate_code(schemas, name, schema, true);
            }
            "string"
        }
        .to_string(),
        "number" | "integer" => "number".to_string(),
        "boolean" => "boolean".to_string(),
        "array" => {
            let items = schema.items.as_ref().expect("No items");
            let item_type = schema_generate_code(schemas, "item".to_string(), items, true);
            format!("Array<{}>", item_type)
        }
        _ => panic!("Unsupported type"),
    };
    if !is_required {
        format!("{} | undefined", r#type)
    } else {
        r#type
    }
}
