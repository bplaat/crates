/*
 * Copyright (c) 2024-2025 Bastiaan van der Plaat
 *
 * SPDX-License-Identifier: MIT
 */

use std::path::Path;

use indexmap::IndexMap;

use crate::openapi::Schema;
use crate::utils::ToCapitalize;

pub(crate) fn generate_schemas(schemas: IndexMap<String, Schema>, output_path: &Path) {
    let mut code_schemas = IndexMap::new();

    // Generate code for schemas
    for (name, schema) in schemas {
        schema_generate_code(&mut code_schemas, name.clone(), &schema);
    }

    // Write .rs file
    let mut code = "// This file is generated by openapi-generator, do not edit!\n\n".to_string();
    for code_schema in code_schemas.values() {
        code.push_str(code_schema);
    }
    std::fs::write(output_path, code)
        .unwrap_or_else(|_| panic!("Failed to write: {}", output_path.display()));
}

fn schema_generate_code(
    code_schemas: &mut IndexMap<String, String>,
    name: String,
    schema: &Schema,
) -> String {
    if let Some(r#ref) = &schema.r#ref {
        let ref_parts: Vec<&str> = r#ref.split('/').collect();
        return ref_parts.last().expect("Invalid ref").to_string();
    }

    if let Some(r#enum) = &schema.r#enum {
        let name = name.to_capitalize();
        let mut code = String::new();
        code.push_str(&format!("export enum {} {{\n", name));
        for variant in r#enum {
            code.push_str(&format!(
                "    {} = '{}',\n",
                variant.to_uppercase(),
                variant
            ));
        }
        code.push_str("}\n\n");
        code_schemas.insert(name.clone(), code);
        return name;
    }

    if let Some(additional_properties) = &schema.additional_properties {
        let field_type = schema_generate_code(code_schemas, name.clone(), additional_properties);
        let code = format!(
            "export type {} = {{ [key: string]: {} }};\n\n",
            name, field_type
        );
        code_schemas.insert(name.clone(), code);
        return name;
    }

    let r#type = schema.r#type.as_ref().expect("Schema should have type");
    if r#type == "object" {
        let mut code = String::new();
        code.push_str(&format!("export interface {} {{\n", name));
        if let Some(properties) = &schema.properties {
            for (prop_name, prop_schema) in properties {
                let is_optional = schema
                    .required
                    .as_ref()
                    .map(|required| !required.contains(prop_name))
                    .unwrap_or_else(|| true);
                let prop_type =
                    schema_generate_code(code_schemas, prop_name.to_string(), prop_schema);
                if is_optional {
                    code.push_str(&format!("    {}?: {},\n", prop_name, prop_type));
                } else {
                    code.push_str(&format!("    {}: {},\n", prop_name, prop_type));
                }
            }
        }
        code.push_str("}\n\n");
        code_schemas.insert(name.clone(), code);
        return name;
    }

    match r#type.as_str() {
        "string" => {
            if schema.r#enum.is_some() {
                return schema_generate_code(code_schemas, name, schema);
            }
            "string".to_string()
        }
        "number" => "number".to_string(),
        "integer" => "number".to_string(),
        "boolean" => "boolean".to_string(),
        "array" => {
            let items = schema.items.as_ref().expect("No items");
            let item_type = schema_generate_code(code_schemas, "item".to_string(), items);
            format!("Array<{}>", item_type)
        }
        _ => panic!("Unsupported type"),
    }
}
