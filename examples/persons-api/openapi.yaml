openapi: 3.0.0
info:
  title: Persons API
  description: Example API for managing persons
  version: 0.1.0

servers:
  - url: http://localhost:8080

paths:
  # MARK: Misc
  /:
    get:
      tags: [Misc]
      summary: Home route
      responses:
        "200":
          description: Name and version of the API
          content:
            text/plain:
              schema:
                type: string

  # MARK: Persons
  /persons:
    get:
      tags: [Persons]
      summary: Get all persons
      parameters:
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
      responses:
        "200":
          description: A list of persons
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PersonIndexResponse"
    post:
      tags: [Persons]
      summary: Create a new person
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Person"
      responses:
        "200":
          description: Person created
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: "#/components/schemas/PersonCreateUpdateBody"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"

  /persons/{id}:
    get:
      tags: [Persons]
      summary: Get a person by ID
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: A single person
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "404":
          description: Person not found
    put:
      tags: [Persons]
      summary: Update a person by ID
      parameters:
        - $ref: "#/components/parameters/Id"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PersonCreateUpdateBody"
      responses:
        "200":
          description: Person updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "404":
          description: Person not found
    delete:
      tags: [Persons]
      summary: Delete a person by ID
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Person deleted
        "404":
          description: Person not found

components:
  # MARK: Parameters
  parameters:
    Id:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid

    Query:
      name: q
      in: query
      required: false
      schema:
        type: string

    Page:
      name: page
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1

    Limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20

  # MARK: Schemas
  schemas:
    Report:
      type: object
      additionalProperties:
        type: array
        items:
          type: string

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
      required:
        - page
        - limit
        - total

    # MARK: Models
    Person:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        age_in_years:
          type: integer
        relation:
          $ref: "#/components/schemas/Relation"
        is_adult:
          type: boolean
        created_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - age_in_years
        - relation
        - created_at

    Relation:
      type: string
      enum: [me, brother, sister]

    # MARK: Bodies
    PersonCreateUpdateBody:
      type: object
      properties:
        name:
          type: string
        age_in_years:
          type: integer
        relation:
          $ref: "#/components/schemas/Relation"
      required:
        - name
        - age_in_years
        - relation

    # MARK: Responses
    PersonIndexResponse:
      type: object
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Person"
      required:
        - pagination
        - data
