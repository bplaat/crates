/*
 * Copyright (c) 2025 Bastiaan van der Plaat
 *
 * SPDX-License-Identifier: MIT
 */

#![doc = include_str!("README.md")]

use std::path::Path;
use std::{env, fs};

fn main() {
    let out_dir = env::var("OUT_DIR").expect("OUT_DIR not set");
    let out_file = Path::new(&out_dir).join("generated_tests.rs");
    let examples_dir = concat!(env!("CARGO_MANIFEST_DIR"), "/examples");
    let mut test_code =
        "// This file is generated by build.rs. Do not edit manually.\n".to_string();

    for entry in fs::read_dir(examples_dir).expect("Failed to read examples directory") {
        let entry = entry.expect("Failed to read directory entry");
        if entry.path().is_dir() {
            let dir_name = entry.file_name().to_string_lossy().to_string();
            if dir_name == "lib" {
                continue;
            }
            if cfg!(not(target_os = "macos")) && dir_name.starts_with("objc") {
                continue;
            }

            test_code.push_str(&format!(
                r#"
#[test]
fn test_bob_{}() {{
    // Rebuild example
    let output = std::process::Command::new(env!("CARGO_BIN_EXE_bob"))
        .arg("rebuild")
        .current_dir("{}")
        .output()
        .expect("Failed to execute bob rebuild command");
    if !output.status.success() {{
        let stdout = String::from_utf8_lossy(&output.stdout);
        let stderr = String::from_utf8_lossy(&output.stderr);
        panic!(
            "Failed to rebuild example {}:\nstdout: {{}}\nstderr: {{}}",
            stdout,
            stderr
        );
    }}
    {}
}}
"#,
                entry
                    .path()
                    .file_name()
                    .expect("Should be some")
                    .to_string_lossy()
                    .replace('-', "_"),
                entry.path().display(),
                entry.path().display(),
                // FIXME: Enable Cunit tests on Linux CI
                if cfg!(target_os = "macos") && (dir_name == "c" || dir_name == "cpp") {
                    format!(
                        r#"
    // Test example
    std::process::Command::new(env!("CARGO_BIN_EXE_bob"))
        .arg("clean")
        .current_dir("{}")
        .output()
        .expect("Failed to execute bob clean command");

    let output = std::process::Command::new(env!("CARGO_BIN_EXE_bob"))
        .arg("test")
        .current_dir("{}")
        .output()
        .expect("Failed to execute bob test command");
    if !output.status.success() {{
        let stdout = String::from_utf8_lossy(&output.stdout);
        let stderr = String::from_utf8_lossy(&output.stderr);
        panic!(
            "Failed to test example {}:\nstdout: {{}}\nstderr: {{}}",
            stdout,
            stderr
        );
    }}
    "#,
                        entry.path().display(),
                        entry.path().display(),
                        entry.path().display()
                    )
                } else {
                    "".to_string()
                }
            ));
        }
    }

    fs::write(out_file, test_code).expect("Could not write generated_tests.rs");
}
