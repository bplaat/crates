/*
 * Copyright (c) 2025 Bastiaan van der Plaat
 *
 * SPDX-License-Identifier: MIT
 */

#![doc = include_str!("README.md")]

use std::path::Path;
use std::process::Command;
use std::{env, fs};

fn main() {
    let out_dir = env::var("OUT_DIR").expect("Should be some");

    // MARK: Compile JavacServer.java
    if cfg!(feature = "javac-server") {
        println!("cargo:rerun-if-changed=src/services/JavacServer.java");
        let status = Command::new("javac")
            .arg("src/services/JavacServer.java")
            .arg("-d")
            .arg(&out_dir)
            .status()
            .expect("Failed to run javac");
        if !status.success() {
            panic!("javac failed to compile JavacServer.java");
        }

        let class_files: Vec<_> = fs::read_dir(&out_dir)
            .expect("Failed to read OUT_DIR")
            .filter_map(|entry| {
                let entry = entry.ok()?;
                let path = entry.path();
                if path.extension()? == "class" {
                    Some(path)
                } else {
                    None
                }
            })
            .collect();
        if class_files.len() > 1 {
            panic!("JavacServer.java should compile to a single class file");
        }
    }

    // MARK: Generate tests from examples
    let out_file = Path::new(&out_dir).join("generated_tests.rs");
    let mut test_code =
        "// This file is generated by build.rs. Do not edit manually.\n".to_string();

    let bin_examples_dir = concat!(env!("CARGO_MANIFEST_DIR"), "/examples/bin");
    let lib_examples_dir = concat!(env!("CARGO_MANIFEST_DIR"), "/examples/lib");
    let mut example_dirs: Vec<String> = Vec::new();
    for dir in &[bin_examples_dir, lib_examples_dir] {
        for entry in fs::read_dir(dir).expect("Failed to read examples directory") {
            let entry = entry.expect("Failed to read directory entry");
            if entry.path().is_dir() {
                example_dirs.push(entry.path().display().to_string());
            }
        }
    }

    for entry in example_dirs {
        let dir_name = entry
            .split('/')
            .next_back()
            .expect("Failed to get last part of path")
            .to_string();

        if env::var("CI").is_ok() {
            // Skip Objective-C tests on non macOS GitHub runners
            if !cfg!(target_os = "macos") && dir_name.starts_with("objc") {
                continue;
            }

            // Skip Android tests on Linux aarch64 GitHub runner
            if cfg!(target_os = "linux")
                && cfg!(target_arch = "aarch64")
                && dir_name.starts_with("android")
            {
                continue;
            }
        }

        // FIXME: Skip android libs because direct build is not working yet
        if dir_name == "android-java-lib" || dir_name == "android-kotlin-lib" {
            continue;
        }

        test_code.push_str(&format!(
            r#"
#[test]
fn test_bob_{}() {{
    // Rebuild example
    let output = std::process::Command::new(env!("CARGO_BIN_EXE_bob"))
        .arg("rebuild")
        .current_dir("{}")
        .output()
        .expect("Failed to execute bob rebuild command");
    if !output.status.success() {{
        let stdout = String::from_utf8_lossy(&output.stdout);
        let stderr = String::from_utf8_lossy(&output.stderr);
        panic!(
            "Failed to rebuild example {}:\nstdout: {{stdout}}\nstderr: {{stderr}}",
        );
    }}
    {}
}}
"#,
            dir_name.replace('-', "_"),
            entry,
            dir_name,
            if dir_name.contains("-with-tests") {
                format!(
                    r#"
    // Retest example
    let output = std::process::Command::new(env!("CARGO_BIN_EXE_bob"))
        .arg("retest")
        .current_dir("{entry}")
        .output()
        .expect("Failed to execute bob test command");
    if !output.status.success() {{
        let stdout = String::from_utf8_lossy(&output.stdout);
        let stderr = String::from_utf8_lossy(&output.stderr);
        panic!(
            "Failed to test example {dir_name}:\nstdout: {{stdout}}\nstderr: {{stderr}}",
        );
    }}
    "#
                )
            } else {
                "".to_string()
            }
        ));
    }

    fs::write(out_file, test_code).expect("Could not write generated_tests.rs");
}
